name: Main cloud-services-engineer-kittygram-final workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8" ,"3.9", "3.10"]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==7.1.1 flake8-isort==6.1.1
        pip install -r ./backend/requirements.txt 
        
    - name: Test flake8 and django tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
  
  build_and_push_to_docker_hub:
  
    name: Push docker image to dockerHub
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: tests
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Push to dockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_REPO }}/kittygram_final_backend:latest 
  
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up nodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 18
        
    - name: Install dependencies
      run: |
        cd frontend/
        npm ci
        
    - name: Test frontend
      run: |
        cd frontend/
        npm run test

  build_frontend_and_push_to_docker_hub:
    name: Push frontend docker image to dockerHub
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_REPO }}/kittygram_final_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Push to dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_REPO }}/kittygram_final_gateway:latest

  deploy:
  
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    needs: 
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create .env file on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          mkdir -p /home/${{ secrets.USER }}/kittygram
          cat <<EOF > /home/${{ secrets.USER }}/kittygram/.env
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          EOF

    - name: Copy docker-compose.yaml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose.production.yaml"
        target: "/home/${{ secrets.USER }}/kittygram"
        
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd kittygram
          sudo docker compose -f docker-compose.production.yaml pull
          sudo docker compose -f docker-compose.production.yaml down
          sudo docker compose -f docker-compose.production.yaml up -d
          sudo docker compose -f docker-compose.production.yaml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yaml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yaml exec backend cp -r /app/collected_static/. /backend_static/static/
  
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: | 
          Completed!!!
          Created by: ${{ github.actor }}
          Commit: ${{ github.event.commits[0].message }}
          Link: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
      
    
